{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToWords = void 0;\nconst DefaultConverterOptions = {\n  currency: false,\n  ignoreDecimal: false,\n  ignoreZeroCurrency: false\n};\n\nclass ToWords {\n  constructor(options = {}) {\n    this.options = {};\n    this.locale = undefined;\n    this.options = Object.assign({\n      localeCode: 'en-IN',\n      converterOptions: DefaultConverterOptions\n    }, options);\n  }\n\n  getLocaleClass() {\n    /* eslint-disable @typescript-eslint/no-var-requires */\n    switch (this.options.localeCode) {\n      case 'en-IN':\n        return require('./locales/en-IN').Locale;\n\n      case 'en-MM':\n        return require('./locales/en-MM').Locale;\n\n      case 'en-MU':\n        return require('./locales/en-MU').Locale;\n\n      case 'en-US':\n        return require('./locales/en-US').Locale;\n\n      case 'en-NG':\n        return require('./locales/en-NG').Locale;\n\n      case 'en-GH':\n        return require('./locales/en-GH').Locale;\n\n      case 'fa-IR':\n        return require('./locales/fa-IR').Locale;\n\n      case 'fr-FR':\n        return require('./locales/fr-FR').Locale;\n    }\n    /* eslint-enable @typescript-eslint/no-var-requires */\n\n\n    throw new Error(`Unknown Locale \"${this.options.localeCode}\"`);\n  }\n\n  getLocale() {\n    if (this.locale === undefined) {\n      const LocaleClass = this.getLocaleClass();\n      this.locale = new LocaleClass();\n    }\n\n    return this.locale;\n  }\n\n  convert(number, options = {}) {\n    var _a, _b, _c, _d;\n\n    options = Object.assign({}, this.options.converterOptions, options);\n\n    if (!this.isValidNumber(number)) {\n      throw new Error(`Invalid Number \"${number}\"`);\n    }\n\n    const locale = this.getLocale();\n    let isFloat = this.isFloat(number);\n\n    if (options.ignoreDecimal) {\n      number = Number.parseInt(number.toString());\n      isFloat = false;\n    }\n\n    const isNegativeNumber = number < 0;\n\n    if (isNegativeNumber) {\n      number = Math.abs(number);\n    }\n\n    if (options.currency) {\n      number = this.toFixed(number); // Extra check for isFloat to overcome 1.999 rounding off to 2\n\n      isFloat = this.isFloat(number);\n      const split = number.toString().split('.');\n      let words = `${this.convertInternal(Number(split[0]), options)}${locale.currency.plural ? ` ${locale.currency.plural}` : ''}`;\n      const isNumberZero = number >= 0 && number < 1;\n      const ignoreZero = options.ignoreZeroCurrency || ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.ignoreZeroInDecimals) && number !== 0;\n\n      if (isNumberZero && ignoreZero) {\n        words = '';\n      }\n\n      let wordsWithDecimal = '';\n\n      if (isFloat) {\n        if (!isNumberZero || !ignoreZero) {\n          wordsWithDecimal += ` ${locale.texts.and} `;\n        }\n\n        const decimalLengthWord = (_b = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _b === void 0 ? void 0 : _b[split[1].length];\n        wordsWithDecimal += `${this.convertInternal(Number(split[1]) * (!locale.decimalLengthWordMapping ? Math.pow(10, 2 - split[1].length) : 1), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''} ${locale.currency.fractionalUnit.plural}`;\n      } else if (locale.decimalLengthWordMapping && words !== '') {\n        words += ` ${locale.currency.fractionalUnit.plural}`;\n      }\n\n      const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n      return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal + (!isEmpty && locale.texts.only ? ` ${locale.texts.only}` : '');\n    } else {\n      const isNumberZero = number >= 0 && number < 1;\n      const split = number.toString().split('.');\n      const ignoreZero = isNumberZero && ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.ignoreZeroInDecimals);\n      const words = isFloat && ignoreZero ? '' : this.convertInternal(Number(split[0]), options);\n      let wordsWithDecimal = '';\n\n      if (isFloat) {\n        const decimalLengthWord = (_d = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _d === void 0 ? void 0 : _d[split[1].length];\n        if (!ignoreZero) wordsWithDecimal += ` ${locale.texts.point} `;\n\n        if (split[1].startsWith('0') && !locale.decimalLengthWordMapping) {\n          const zeroWords = [];\n\n          for (const num of split[1]) {\n            zeroWords.push(this.convertInternal(Number(num)));\n          }\n\n          wordsWithDecimal += zeroWords.join(' ');\n        } else {\n          wordsWithDecimal += `${this.convertInternal(Number(split[1]), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''}`;\n        }\n      }\n\n      const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n      return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal;\n    }\n  }\n\n  convertInternal(number, options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    const locale = this.getLocale();\n    const splitWord = ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.splitWord) ? `${(_b = locale.options) === null || _b === void 0 ? void 0 : _b.splitWord} ` : '';\n    const pluralMark = ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.pluralMark) ? `${(_d = locale.options) === null || _d === void 0 ? void 0 : _d.pluralMark}` : '';\n    const match = locale.numberWordsMapping.find(elem => {\n      return number >= elem.number;\n    });\n\n    if (!match) {\n      throw new Error(`Invalid Number \"${number}\"`);\n    }\n\n    let words = '';\n\n    if (number <= 100 || number < 1000 && ((_e = locale.options) === null || _e === void 0 ? void 0 : _e.namedLessThan1000)) {\n      words += match.value;\n      number -= match.number;\n\n      if (number > 0) {\n        words += ` ${splitWord}${this.convertInternal(number, options)}`;\n      }\n    } else {\n      const quotient = Math.floor(number / match.number);\n      const remainder = number % match.number;\n      const matchValue = quotient > 1 && ((_g = (_f = locale.options) === null || _f === void 0 ? void 0 : _f.pluralWords) === null || _g === void 0 ? void 0 : _g.find(word => word === match.value)) ? match.value + pluralMark : match.value;\n\n      if (remainder > 0) {\n        if (quotient == 1 && ((_h = locale.options) === null || _h === void 0 ? void 0 : _h.ignoreOneForWords)) {\n          return `${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n        } else {\n          return `${this.convertInternal(quotient, options)} ${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n        }\n      } else {\n        if (quotient == 1 && ((_j = locale.options) === null || _j === void 0 ? void 0 : _j.ignoreOneForWords)) {\n          return `${matchValue}`;\n        } else {\n          return `${this.convertInternal(quotient, options)} ${matchValue}`;\n        }\n      }\n    }\n\n    return words;\n  }\n\n  toFixed(number, precision = 2) {\n    return Number(Number(number).toFixed(precision));\n  }\n\n  isFloat(number) {\n    return Number(number) === number && number % 1 !== 0;\n  }\n\n  isValidNumber(number) {\n    return !isNaN(parseFloat(number)) && isFinite(number);\n  }\n\n}\n\nexports.ToWords = ToWords;","map":{"version":3,"sources":["C:/xampp/htdocs/Partnr/partnrd/partnrd_frontend/node_modules/to-words/dist/to-words.js"],"names":["Object","defineProperty","exports","value","ToWords","DefaultConverterOptions","currency","ignoreDecimal","ignoreZeroCurrency","constructor","options","locale","undefined","assign","localeCode","converterOptions","getLocaleClass","require","Locale","Error","getLocale","LocaleClass","convert","number","_a","_b","_c","_d","isValidNumber","isFloat","Number","parseInt","toString","isNegativeNumber","Math","abs","toFixed","split","words","convertInternal","plural","isNumberZero","ignoreZero","ignoreZeroInDecimals","wordsWithDecimal","texts","and","decimalLengthWord","decimalLengthWordMapping","length","pow","fractionalUnit","isEmpty","minus","only","point","startsWith","zeroWords","num","push","join","_e","_f","_g","_h","_j","splitWord","pluralMark","match","numberWordsMapping","find","elem","namedLessThan1000","quotient","floor","remainder","matchValue","pluralWords","word","ignoreOneForWords","precision","isNaN","parseFloat","isFinite"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToWords = void 0;\nconst DefaultConverterOptions = {\n    currency: false,\n    ignoreDecimal: false,\n    ignoreZeroCurrency: false,\n};\nclass ToWords {\n    constructor(options = {}) {\n        this.options = {};\n        this.locale = undefined;\n        this.options = Object.assign({\n            localeCode: 'en-IN',\n            converterOptions: DefaultConverterOptions,\n        }, options);\n    }\n    getLocaleClass() {\n        /* eslint-disable @typescript-eslint/no-var-requires */\n        switch (this.options.localeCode) {\n            case 'en-IN':\n                return require('./locales/en-IN').Locale;\n            case 'en-MM':\n                return require('./locales/en-MM').Locale;\n            case 'en-MU':\n                return require('./locales/en-MU').Locale;\n            case 'en-US':\n                return require('./locales/en-US').Locale;\n            case 'en-NG':\n                return require('./locales/en-NG').Locale;\n            case 'en-GH':\n                return require('./locales/en-GH').Locale;\n            case 'fa-IR':\n                return require('./locales/fa-IR').Locale;\n            case 'fr-FR':\n                return require('./locales/fr-FR').Locale;\n        }\n        /* eslint-enable @typescript-eslint/no-var-requires */\n        throw new Error(`Unknown Locale \"${this.options.localeCode}\"`);\n    }\n    getLocale() {\n        if (this.locale === undefined) {\n            const LocaleClass = this.getLocaleClass();\n            this.locale = new LocaleClass();\n        }\n        return this.locale;\n    }\n    convert(number, options = {}) {\n        var _a, _b, _c, _d;\n        options = Object.assign({}, this.options.converterOptions, options);\n        if (!this.isValidNumber(number)) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        const locale = this.getLocale();\n        let isFloat = this.isFloat(number);\n        if (options.ignoreDecimal) {\n            number = Number.parseInt(number.toString());\n            isFloat = false;\n        }\n        const isNegativeNumber = number < 0;\n        if (isNegativeNumber) {\n            number = Math.abs(number);\n        }\n        if (options.currency) {\n            number = this.toFixed(number);\n            // Extra check for isFloat to overcome 1.999 rounding off to 2\n            isFloat = this.isFloat(number);\n            const split = number.toString().split('.');\n            let words = `${this.convertInternal(Number(split[0]), options)}${locale.currency.plural ? ` ${locale.currency.plural}` : ''}`;\n            const isNumberZero = number >= 0 && number < 1;\n            const ignoreZero = options.ignoreZeroCurrency || (((_a = locale.options) === null || _a === void 0 ? void 0 : _a.ignoreZeroInDecimals) && number !== 0);\n            if (isNumberZero && ignoreZero) {\n                words = '';\n            }\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                if (!isNumberZero || !ignoreZero) {\n                    wordsWithDecimal += ` ${locale.texts.and} `;\n                }\n                const decimalLengthWord = (_b = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _b === void 0 ? void 0 : _b[split[1].length];\n                wordsWithDecimal += `${this.convertInternal(Number(split[1]) * (!locale.decimalLengthWordMapping ? Math.pow(10, 2 - split[1].length) : 1), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''} ${locale.currency.fractionalUnit.plural}`;\n            }\n            else if (locale.decimalLengthWordMapping && words !== '') {\n                words += ` ${locale.currency.fractionalUnit.plural}`;\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return ((!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') +\n                words +\n                wordsWithDecimal +\n                (!isEmpty && locale.texts.only ? ` ${locale.texts.only}` : ''));\n        }\n        else {\n            const isNumberZero = number >= 0 && number < 1;\n            const split = number.toString().split('.');\n            const ignoreZero = isNumberZero && ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.ignoreZeroInDecimals);\n            const words = isFloat && ignoreZero ? '' : this.convertInternal(Number(split[0]), options);\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                const decimalLengthWord = (_d = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _d === void 0 ? void 0 : _d[split[1].length];\n                if (!ignoreZero)\n                    wordsWithDecimal += ` ${locale.texts.point} `;\n                if (split[1].startsWith('0') && !locale.decimalLengthWordMapping) {\n                    const zeroWords = [];\n                    for (const num of split[1]) {\n                        zeroWords.push(this.convertInternal(Number(num)));\n                    }\n                    wordsWithDecimal += zeroWords.join(' ');\n                }\n                else {\n                    wordsWithDecimal += `${this.convertInternal(Number(split[1]), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''}`;\n                }\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal;\n        }\n    }\n    convertInternal(number, options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const locale = this.getLocale();\n        const splitWord = ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.splitWord) ? `${(_b = locale.options) === null || _b === void 0 ? void 0 : _b.splitWord} ` : '';\n        const pluralMark = ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.pluralMark) ? `${(_d = locale.options) === null || _d === void 0 ? void 0 : _d.pluralMark}` : '';\n        const match = locale.numberWordsMapping.find((elem) => {\n            return number >= elem.number;\n        });\n        if (!match) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        let words = '';\n        if (number <= 100 || (number < 1000 && ((_e = locale.options) === null || _e === void 0 ? void 0 : _e.namedLessThan1000))) {\n            words += match.value;\n            number -= match.number;\n            if (number > 0) {\n                words += ` ${splitWord}${this.convertInternal(number, options)}`;\n            }\n        }\n        else {\n            const quotient = Math.floor(number / match.number);\n            const remainder = number % match.number;\n            const matchValue = quotient > 1 && ((_g = (_f = locale.options) === null || _f === void 0 ? void 0 : _f.pluralWords) === null || _g === void 0 ? void 0 : _g.find((word) => word === match.value))\n                ? match.value + pluralMark\n                : match.value;\n            if (remainder > 0) {\n                if (quotient == 1 && ((_h = locale.options) === null || _h === void 0 ? void 0 : _h.ignoreOneForWords)) {\n                    return `${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n                }\n                else {\n                    return `${this.convertInternal(quotient, options)} ${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n                }\n            }\n            else {\n                if (quotient == 1 && ((_j = locale.options) === null || _j === void 0 ? void 0 : _j.ignoreOneForWords)) {\n                    return `${matchValue}`;\n                }\n                else {\n                    return `${this.convertInternal(quotient, options)} ${matchValue}`;\n                }\n            }\n        }\n        return words;\n    }\n    toFixed(number, precision = 2) {\n        return Number(Number(number).toFixed(precision));\n    }\n    isFloat(number) {\n        return Number(number) === number && number % 1 !== 0;\n    }\n    isValidNumber(number) {\n        return !isNaN(parseFloat(number)) && isFinite(number);\n    }\n}\nexports.ToWords = ToWords;\n"]},"metadata":{},"sourceType":"script"}