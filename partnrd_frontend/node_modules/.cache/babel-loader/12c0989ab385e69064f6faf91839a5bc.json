{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/xampp/htdocs/Partnr/partnrd/partnrd_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/xampp/htdocs/Partnr/partnrd/partnrd_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/xampp/htdocs/Partnr/partnrd/partnrd_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToWords = void 0;\nvar DefaultConverterOptions = {\n  currency: false,\n  ignoreDecimal: false,\n  ignoreZeroCurrency: false\n};\n\nvar ToWords = /*#__PURE__*/function () {\n  function ToWords() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ToWords);\n\n    this.options = {};\n    this.locale = undefined;\n    this.options = Object.assign({\n      localeCode: 'en-IN',\n      converterOptions: DefaultConverterOptions\n    }, options);\n  }\n\n  _createClass(ToWords, [{\n    key: \"getLocaleClass\",\n    value: function getLocaleClass() {\n      /* eslint-disable @typescript-eslint/no-var-requires */\n      switch (this.options.localeCode) {\n        case 'en-IN':\n          return require('./locales/en-IN').Locale;\n\n        case 'en-MM':\n          return require('./locales/en-MM').Locale;\n\n        case 'en-MU':\n          return require('./locales/en-MU').Locale;\n\n        case 'en-US':\n          return require('./locales/en-US').Locale;\n\n        case 'en-NG':\n          return require('./locales/en-NG').Locale;\n\n        case 'en-GH':\n          return require('./locales/en-GH').Locale;\n\n        case 'fa-IR':\n          return require('./locales/fa-IR').Locale;\n\n        case 'fr-FR':\n          return require('./locales/fr-FR').Locale;\n      }\n      /* eslint-enable @typescript-eslint/no-var-requires */\n\n\n      throw new Error(\"Unknown Locale \\\"\".concat(this.options.localeCode, \"\\\"\"));\n    }\n  }, {\n    key: \"getLocale\",\n    value: function getLocale() {\n      if (this.locale === undefined) {\n        var LocaleClass = this.getLocaleClass();\n        this.locale = new LocaleClass();\n      }\n\n      return this.locale;\n    }\n  }, {\n    key: \"convert\",\n    value: function convert(number) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _a, _b, _c, _d;\n\n      options = Object.assign({}, this.options.converterOptions, options);\n\n      if (!this.isValidNumber(number)) {\n        throw new Error(\"Invalid Number \\\"\".concat(number, \"\\\"\"));\n      }\n\n      var locale = this.getLocale();\n      var isFloat = this.isFloat(number);\n\n      if (options.ignoreDecimal) {\n        number = Number.parseInt(number.toString());\n        isFloat = false;\n      }\n\n      var isNegativeNumber = number < 0;\n\n      if (isNegativeNumber) {\n        number = Math.abs(number);\n      }\n\n      if (options.currency) {\n        number = this.toFixed(number); // Extra check for isFloat to overcome 1.999 rounding off to 2\n\n        isFloat = this.isFloat(number);\n        var split = number.toString().split('.');\n        var words = \"\".concat(this.convertInternal(Number(split[0]), options)).concat(locale.currency.plural ? \" \".concat(locale.currency.plural) : '');\n        var isNumberZero = number >= 0 && number < 1;\n        var ignoreZero = options.ignoreZeroCurrency || ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.ignoreZeroInDecimals) && number !== 0;\n\n        if (isNumberZero && ignoreZero) {\n          words = '';\n        }\n\n        var wordsWithDecimal = '';\n\n        if (isFloat) {\n          if (!isNumberZero || !ignoreZero) {\n            wordsWithDecimal += \" \".concat(locale.texts.and, \" \");\n          }\n\n          var decimalLengthWord = (_b = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _b === void 0 ? void 0 : _b[split[1].length];\n          wordsWithDecimal += \"\".concat(this.convertInternal(Number(split[1]) * (!locale.decimalLengthWordMapping ? Math.pow(10, 2 - split[1].length) : 1), options)).concat(decimalLengthWord ? \" \".concat(decimalLengthWord) : '', \" \").concat(locale.currency.fractionalUnit.plural);\n        } else if (locale.decimalLengthWordMapping && words !== '') {\n          words += \" \".concat(locale.currency.fractionalUnit.plural);\n        }\n\n        var isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n        return (!isEmpty && isNegativeNumber ? \"\".concat(locale.texts.minus, \" \") : '') + words + wordsWithDecimal + (!isEmpty && locale.texts.only ? \" \".concat(locale.texts.only) : '');\n      } else {\n        var _isNumberZero = number >= 0 && number < 1;\n\n        var _split = number.toString().split('.');\n\n        var _ignoreZero = _isNumberZero && ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.ignoreZeroInDecimals);\n\n        var _words = isFloat && _ignoreZero ? '' : this.convertInternal(Number(_split[0]), options);\n\n        var _wordsWithDecimal = '';\n\n        if (isFloat) {\n          var _decimalLengthWord = (_d = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _d === void 0 ? void 0 : _d[_split[1].length];\n\n          if (!_ignoreZero) _wordsWithDecimal += \" \".concat(locale.texts.point, \" \");\n\n          if (_split[1].startsWith('0') && !locale.decimalLengthWordMapping) {\n            var zeroWords = [];\n\n            var _iterator = _createForOfIteratorHelper(_split[1]),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var num = _step.value;\n                zeroWords.push(this.convertInternal(Number(num)));\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            _wordsWithDecimal += zeroWords.join(' ');\n          } else {\n            _wordsWithDecimal += \"\".concat(this.convertInternal(Number(_split[1]), options)).concat(_decimalLengthWord ? \" \".concat(_decimalLengthWord) : '');\n          }\n        }\n\n        var _isEmpty = _words.length <= 0 && _wordsWithDecimal.length <= 0;\n\n        return (!_isEmpty && isNegativeNumber ? \"\".concat(locale.texts.minus, \" \") : '') + _words + _wordsWithDecimal;\n      }\n    }\n  }, {\n    key: \"convertInternal\",\n    value: function convertInternal(number) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n      var locale = this.getLocale();\n      var splitWord = ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.splitWord) ? \"\".concat((_b = locale.options) === null || _b === void 0 ? void 0 : _b.splitWord, \" \") : '';\n      var pluralMark = ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.pluralMark) ? \"\".concat((_d = locale.options) === null || _d === void 0 ? void 0 : _d.pluralMark) : '';\n      var match = locale.numberWordsMapping.find(function (elem) {\n        return number >= elem.number;\n      });\n\n      if (!match) {\n        throw new Error(\"Invalid Number \\\"\".concat(number, \"\\\"\"));\n      }\n\n      var words = '';\n\n      if (number <= 100 || number < 1000 && ((_e = locale.options) === null || _e === void 0 ? void 0 : _e.namedLessThan1000)) {\n        words += match.value;\n        number -= match.number;\n\n        if (number > 0) {\n          words += \" \".concat(splitWord).concat(this.convertInternal(number, options));\n        }\n      } else {\n        var quotient = Math.floor(number / match.number);\n        var remainder = number % match.number;\n        var matchValue = quotient > 1 && ((_g = (_f = locale.options) === null || _f === void 0 ? void 0 : _f.pluralWords) === null || _g === void 0 ? void 0 : _g.find(function (word) {\n          return word === match.value;\n        })) ? match.value + pluralMark : match.value;\n\n        if (remainder > 0) {\n          if (quotient == 1 && ((_h = locale.options) === null || _h === void 0 ? void 0 : _h.ignoreOneForWords)) {\n            return \"\".concat(matchValue, \" \").concat(splitWord).concat(this.convertInternal(remainder, options));\n          } else {\n            return \"\".concat(this.convertInternal(quotient, options), \" \").concat(matchValue, \" \").concat(splitWord).concat(this.convertInternal(remainder, options));\n          }\n        } else {\n          if (quotient == 1 && ((_j = locale.options) === null || _j === void 0 ? void 0 : _j.ignoreOneForWords)) {\n            return \"\".concat(matchValue);\n          } else {\n            return \"\".concat(this.convertInternal(quotient, options), \" \").concat(matchValue);\n          }\n        }\n      }\n\n      return words;\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed(number) {\n      var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      return Number(Number(number).toFixed(precision));\n    }\n  }, {\n    key: \"isFloat\",\n    value: function isFloat(number) {\n      return Number(number) === number && number % 1 !== 0;\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number) {\n      return !isNaN(parseFloat(number)) && isFinite(number);\n    }\n  }]);\n\n  return ToWords;\n}();\n\nexports.ToWords = ToWords;","map":{"version":3,"sources":["C:/xampp/htdocs/Partnr/partnrd/partnrd_frontend/node_modules/to-words/dist/to-words.js"],"names":["Object","defineProperty","exports","value","ToWords","DefaultConverterOptions","currency","ignoreDecimal","ignoreZeroCurrency","options","locale","undefined","assign","localeCode","converterOptions","require","Locale","Error","LocaleClass","getLocaleClass","number","_a","_b","_c","_d","isValidNumber","getLocale","isFloat","Number","parseInt","toString","isNegativeNumber","Math","abs","toFixed","split","words","convertInternal","plural","isNumberZero","ignoreZero","ignoreZeroInDecimals","wordsWithDecimal","texts","and","decimalLengthWord","decimalLengthWordMapping","length","pow","fractionalUnit","isEmpty","minus","only","point","startsWith","zeroWords","num","push","join","_e","_f","_g","_h","_j","splitWord","pluralMark","match","numberWordsMapping","find","elem","namedLessThan1000","quotient","floor","remainder","matchValue","pluralWords","word","ignoreOneForWords","precision","isNaN","parseFloat","isFinite"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToWords = void 0;\nconst DefaultConverterOptions = {\n    currency: false,\n    ignoreDecimal: false,\n    ignoreZeroCurrency: false,\n};\nclass ToWords {\n    constructor(options = {}) {\n        this.options = {};\n        this.locale = undefined;\n        this.options = Object.assign({\n            localeCode: 'en-IN',\n            converterOptions: DefaultConverterOptions,\n        }, options);\n    }\n    getLocaleClass() {\n        /* eslint-disable @typescript-eslint/no-var-requires */\n        switch (this.options.localeCode) {\n            case 'en-IN':\n                return require('./locales/en-IN').Locale;\n            case 'en-MM':\n                return require('./locales/en-MM').Locale;\n            case 'en-MU':\n                return require('./locales/en-MU').Locale;\n            case 'en-US':\n                return require('./locales/en-US').Locale;\n            case 'en-NG':\n                return require('./locales/en-NG').Locale;\n            case 'en-GH':\n                return require('./locales/en-GH').Locale;\n            case 'fa-IR':\n                return require('./locales/fa-IR').Locale;\n            case 'fr-FR':\n                return require('./locales/fr-FR').Locale;\n        }\n        /* eslint-enable @typescript-eslint/no-var-requires */\n        throw new Error(`Unknown Locale \"${this.options.localeCode}\"`);\n    }\n    getLocale() {\n        if (this.locale === undefined) {\n            const LocaleClass = this.getLocaleClass();\n            this.locale = new LocaleClass();\n        }\n        return this.locale;\n    }\n    convert(number, options = {}) {\n        var _a, _b, _c, _d;\n        options = Object.assign({}, this.options.converterOptions, options);\n        if (!this.isValidNumber(number)) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        const locale = this.getLocale();\n        let isFloat = this.isFloat(number);\n        if (options.ignoreDecimal) {\n            number = Number.parseInt(number.toString());\n            isFloat = false;\n        }\n        const isNegativeNumber = number < 0;\n        if (isNegativeNumber) {\n            number = Math.abs(number);\n        }\n        if (options.currency) {\n            number = this.toFixed(number);\n            // Extra check for isFloat to overcome 1.999 rounding off to 2\n            isFloat = this.isFloat(number);\n            const split = number.toString().split('.');\n            let words = `${this.convertInternal(Number(split[0]), options)}${locale.currency.plural ? ` ${locale.currency.plural}` : ''}`;\n            const isNumberZero = number >= 0 && number < 1;\n            const ignoreZero = options.ignoreZeroCurrency || (((_a = locale.options) === null || _a === void 0 ? void 0 : _a.ignoreZeroInDecimals) && number !== 0);\n            if (isNumberZero && ignoreZero) {\n                words = '';\n            }\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                if (!isNumberZero || !ignoreZero) {\n                    wordsWithDecimal += ` ${locale.texts.and} `;\n                }\n                const decimalLengthWord = (_b = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _b === void 0 ? void 0 : _b[split[1].length];\n                wordsWithDecimal += `${this.convertInternal(Number(split[1]) * (!locale.decimalLengthWordMapping ? Math.pow(10, 2 - split[1].length) : 1), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''} ${locale.currency.fractionalUnit.plural}`;\n            }\n            else if (locale.decimalLengthWordMapping && words !== '') {\n                words += ` ${locale.currency.fractionalUnit.plural}`;\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return ((!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') +\n                words +\n                wordsWithDecimal +\n                (!isEmpty && locale.texts.only ? ` ${locale.texts.only}` : ''));\n        }\n        else {\n            const isNumberZero = number >= 0 && number < 1;\n            const split = number.toString().split('.');\n            const ignoreZero = isNumberZero && ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.ignoreZeroInDecimals);\n            const words = isFloat && ignoreZero ? '' : this.convertInternal(Number(split[0]), options);\n            let wordsWithDecimal = '';\n            if (isFloat) {\n                const decimalLengthWord = (_d = locale === null || locale === void 0 ? void 0 : locale.decimalLengthWordMapping) === null || _d === void 0 ? void 0 : _d[split[1].length];\n                if (!ignoreZero)\n                    wordsWithDecimal += ` ${locale.texts.point} `;\n                if (split[1].startsWith('0') && !locale.decimalLengthWordMapping) {\n                    const zeroWords = [];\n                    for (const num of split[1]) {\n                        zeroWords.push(this.convertInternal(Number(num)));\n                    }\n                    wordsWithDecimal += zeroWords.join(' ');\n                }\n                else {\n                    wordsWithDecimal += `${this.convertInternal(Number(split[1]), options)}${decimalLengthWord ? ` ${decimalLengthWord}` : ''}`;\n                }\n            }\n            const isEmpty = words.length <= 0 && wordsWithDecimal.length <= 0;\n            return (!isEmpty && isNegativeNumber ? `${locale.texts.minus} ` : '') + words + wordsWithDecimal;\n        }\n    }\n    convertInternal(number, options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const locale = this.getLocale();\n        const splitWord = ((_a = locale.options) === null || _a === void 0 ? void 0 : _a.splitWord) ? `${(_b = locale.options) === null || _b === void 0 ? void 0 : _b.splitWord} ` : '';\n        const pluralMark = ((_c = locale.options) === null || _c === void 0 ? void 0 : _c.pluralMark) ? `${(_d = locale.options) === null || _d === void 0 ? void 0 : _d.pluralMark}` : '';\n        const match = locale.numberWordsMapping.find((elem) => {\n            return number >= elem.number;\n        });\n        if (!match) {\n            throw new Error(`Invalid Number \"${number}\"`);\n        }\n        let words = '';\n        if (number <= 100 || (number < 1000 && ((_e = locale.options) === null || _e === void 0 ? void 0 : _e.namedLessThan1000))) {\n            words += match.value;\n            number -= match.number;\n            if (number > 0) {\n                words += ` ${splitWord}${this.convertInternal(number, options)}`;\n            }\n        }\n        else {\n            const quotient = Math.floor(number / match.number);\n            const remainder = number % match.number;\n            const matchValue = quotient > 1 && ((_g = (_f = locale.options) === null || _f === void 0 ? void 0 : _f.pluralWords) === null || _g === void 0 ? void 0 : _g.find((word) => word === match.value))\n                ? match.value + pluralMark\n                : match.value;\n            if (remainder > 0) {\n                if (quotient == 1 && ((_h = locale.options) === null || _h === void 0 ? void 0 : _h.ignoreOneForWords)) {\n                    return `${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n                }\n                else {\n                    return `${this.convertInternal(quotient, options)} ${matchValue} ${splitWord}${this.convertInternal(remainder, options)}`;\n                }\n            }\n            else {\n                if (quotient == 1 && ((_j = locale.options) === null || _j === void 0 ? void 0 : _j.ignoreOneForWords)) {\n                    return `${matchValue}`;\n                }\n                else {\n                    return `${this.convertInternal(quotient, options)} ${matchValue}`;\n                }\n            }\n        }\n        return words;\n    }\n    toFixed(number, precision = 2) {\n        return Number(Number(number).toFixed(precision));\n    }\n    isFloat(number) {\n        return Number(number) === number && number % 1 !== 0;\n    }\n    isValidNumber(number) {\n        return !isNaN(parseFloat(number)) && isFinite(number);\n    }\n}\nexports.ToWords = ToWords;\n"]},"metadata":{},"sourceType":"script"}